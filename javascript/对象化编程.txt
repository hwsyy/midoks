//基本类型:Object,Array,String,Function,Number...

--
function oo(name){
	var _name = name;//变量
}
function pp(){
	Parent.call(this,name);//继承分类
}
-------------------------
//在JavaScript编程语言中,只有Object和Function两种类型具有对象化能力
//方法对象:一种是用来调用执行,一种就是作为对象进行处理.
-----------------------------------------------------------------

--constructor
	对创建对象的函数的引用(指针),对与Obeject对象,该指针指向原始的Object函数
--prototype
	对该对象的对象原型的引用.对于所有的对象,它默认返回Object对象的一个实例.
--toString()
	返回对象的原始字符串表示.对于Object对象,ECMA-262没有定义这个值,所以不同的ECMAScript实现具有不同的值.
--valueOf()
	返回最适合该对象的原始值.对于许多对象,该方法返回的值都与toString()的返回值相同.
--hasOwnProperty(property)
	判断对象是否有着某个特定的属性。必须用字符串指定该属性.
--isPrototypeOf(object)
	判断该对象是否为另一个对象的原型.
--propertyIsEnumberable
	判断给定的属性是否可以 用for..in语句进行枚举.
--------------------------------------------------------------------------------
面向对象原型式继承|
-------------------
//基类的构造函数
function Parent(){}
//子类构造函数
function Child(){}
//建立一个基类的对象作为子类原型的原型(原型继承)
Child.prototype = new Parent();
//实例化child()对象
var child = new Child();
-------------------------------------------------------------------------------
面向对象类式继承|
-----------------
-----------------------------------------------------------------------------------
Function.prototype.toString = function(){										  |
		return "我是所有function的toString方法,跟我同样类型的都继承了我这个方法"; |
	}                                                                             |
	                                                                              |
	var obj = new Object();                                                       |
	var arr = new Array("Adam", "Yukee", "Tom");                                  |
	var str = new String("Hello");                                                |
	                                                                              |
	function func(){                                                              |
		alert("Hello Func");                                                      |
	}                                                                             |
	                                                                              |
	alert(func instanceof Function);                                              |
-----------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
	//父类                                                 
	function Parent(name, age, sex){
		this.name = name;
		this.age = age;
		this.sex = sex;
		
		this.say = function(){
			alert(this.name + " - " + this.age + " - " + this.sex);
		}
	}
	//子类
	function Child(name, age, sex, work){
		//使用call方法继承父类的功能.
		Parent.call(this, name, age, sex);
		
		this.work = work;
		
		this.say = function(){
			alert(this.name + " - " + this.age + " - " + this.sex + " - " + this.work);
		}
		
	}
	var p = new Parent("Adam", 25, "Male");
	var c = new Child("Adam", 25, "Male", "Designer");
	p.say();c.say();
-------------------------------------------------------------------------------------------------